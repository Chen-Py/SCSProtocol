##  敏感条约签订协议（SCS）
*Sensitive Contract Signing Protocol*

#### 1.参与者

协议需要三个参与者：**Alice**、**Bob**和**Trent**。其中：
* `Alice`和`Bob`是参与敏感条约签订的两方
* `Trent`是可信的第三方；不会欺骗协议中的任何一方，也不会帮助任何一方骗取另一方的隐秘信息。
#### 2.协议目标

* 若条约签订成功，则三个参与者均会得知。
* 若条约签订失败，`Alice`和`Bob`中不同意签订条约的人无法得知对方的选择。
* 若条约签订失败，`Trent`无法得知是谁选择拒绝，也无法得知有几人选择拒绝。

#### 3.协议原理

首先，三方协定三个大整数数：`Alice`：$a$，`Bob`：$b$，`Trent`：$N$。其中，$a$和$b$是素数，$N=a\times b$。然后，每当需要签订条约时，三方协定一个指数$s$和一个无法分解的大合数$M$。`Alice`和`Bob`分别计算$A\equiv a^s\pmod M$和$B\equiv b^s\pmod M$并将其发送给`Trent`。然后`Trent`对签订结果进行判定：若$AB\equiv N^s\pmod M$则说明双方均同意该条约，签订成功；反之则说明至少有一方不同意该条约，签订失败。此过程中，`Alice`和`Bob`都无法单独通过已有的信息和拦截的信息来判断另一方的选择，若条约签订失败，`Trent`也无法判断是谁选择拒绝条约。
#### 4.协议描述

**【准备部分】**
准备部分的任务是协定$a$、$b$、$N$（$a$与$b$是素数，$N=ab$）以供后续条约签订使用。所协定的$a$、$b$、$N$可供以后多次使用。准备部分协议有多种实现方式。本文给出其中较为易于实现的一种。
**Step1：**`Trent`使用`RSA算法`生成公钥$(e,n)$和私钥$(d)$，并将公钥发送给`Alice`.
**Step2：**`Alice`选定素数$a$，计算$A_0\equiv a^e\pmod n$，并将$A_0$发给`Bob`.
**Step3：**`Bob`选定素数$b$，计算$B_0\equiv b^e\pmod n$、$N_0\equiv A_0B_0\pmod n$，并将$N_0$发送给`Trent`.
**Step4：**`Trent`计算$N\equiv N_0^d\pmod n$.

**【签约部分】**
签约阶段包含两个阶段，第一部分是协定无法分解的大合数$M$；第二阶段是双方的态度声明与第三方的结果判定。
**Step1：**`Alice`和`Bob`分别生成大合数$P$和$Q$，并将其发送给`Trent`.
**Step2：**`Trent`选定一个大整数$s$，计算$M=PQ$，并将$s$和$M$发送给`Alice`和`Bob`.
**Step3(Alice)：** 若`Alice`同意该条约，计算$A\equiv a^s\pmod M$，并将其发送给`Trent`；若不同意该条约，则随意选择一个小于$M$的整数$A$发送给`Trent`.
**Step3(Bob)：** 若`Bob`同意该条约，计算$B\equiv b^s\pmod M$，并将其发送给`Trent`；若不同意该条约，则随意选择一个小于$M$的整数$B$发送给`Trent`.
**Step4：**`Trent`判定等式$AB\equiv N^s\pmod M$是否成立：若成立则说明双方均同意，签订成功，若不成立则说明有人不同意，签订失败。将判定结果发送给`Alice`和`Bob`即可.

#### 5.应用场景

本协议可以解决很多敏感条约签订时一方同意一方拒绝的尴尬，也可以在很多提议场合使用，减少许多提议被拒绝的尴尬。另外，面对诸如社交软件中删好友后的重加问题，情侣吵架分手后的复合问题，表白问题等许多具有敏感性提议、敏感性条约的问题，本协议都可以很好的避免尴尬。
